name = character()
for(j in 1:length(names)){
if(length(results[[1]][[j]])== 0){next} else {
txt = unlist(results[[1]][[j]])
content[j] = paste(txt,collapse = " ")
name[j] = names[j]
}
}
preData = data.frame(name, content)
preData = preData[complete.cases(preData),]
split = strsplit(preData$name , "post")
post_id <- numeric()
owner = character()
for(x in 1:nrow(preData)){
post_id[x] = as.numeric(split[[x]][2])
owner[x] = split[[x]][1]
}
content_data = data.frame(post_id= post_id , name = owner , content = preData$content )
content_data <- content_data[,c(2,3,1)]
content_data = arrange(content_data,post_id)
posters = character()
source = character()
splitNames = strsplit(content_data$name,",")
for(y in 1:length(splitNames)){
posters[y] = splitNames[[y]][1]
source[y] = paste(splitNames[[y]][2],splitNames[[y]][3],sep = "/")
}
content_data$name <- posters
content_data$source <- source
# time data cleaning and processing
print("processing time data")
times = attr(results[[2]],"names")
post_id = numeric()
time = character()
split = strsplit(times,"post")
for(a in 1:length(times)){
time[a] = results[[2]][[a]][[1]]
post_id[a] = as.numeric(split[[a]][2])
}
time_data = data.frame(post_id,time)
time_data = arrange(time_data,post_id)
# Removing missing content data
x = content_data$post_id[!is.na(content_data$content)]
content_data <- content_data[complete.cases(content_data),]
time_data <- time_data[x,]
# Removing unwanted characters
content_data$content = gsub("\\.(?=[^.]*\\.)", "", content_data$content, perl=TRUE)
content_data$content = gsub("\\." , "" , content_data$content)
# Joining the time and the content data tables by the post_id.
data = merge(content_data,time_data,by.x= "post_id" , by.y ="post_id",all = T)
print("extracting informations from content and preparing to export")
# as the time of the post can be in the formats : 1h , 35 mins , Yesterday ...
# we need to convert it to a date and time format.
for(b in 1:nrow(data)){
if(grepl("min",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60)
}
if(grepl("hr",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60*60)
}
if(grepl("Now",data$time[b])){
data$time[b] <- Sys.time()
}
if(grepl("Yesterday",data$time[b])){
data$time[b] <-  gsub("Yesterday",as.character(Sys.Date()-1),data$time[b] )
data$time[b] <- gsub("at","",data$time[b])
}
}
# Format the dates
newTime <- rep(ymd(Sys.Date()), nrow(data))
for( s in 1:nrow(data)){
if(grepl("at",data$time[s])){
if(grepl("202",data$time[s])){
dayMonth =  strsplit(data$time[s],",")[[1]][1]
year = strsplit(data$time[s],",")[[1]][2]
year = gsub(" ","",year)
year = substr(year,1,4)
newTime[s] <- mdy(gsub(" ", "-" ,paste(dayMonth,year) ))
} else {
newTime[s] <- mdy(gsub(" ","-",paste0(strsplit(data$time[s],"at")[[1]][1],"2021")))
}
} else {
newTime[s] <- ymd(substr(data$time[s],1,10))
}
}
data$time <- newTime
# creating a column with the current group id
data$group_id <- rep(group , nrow(data))
# row binding the result of the current group with previous data
final_content_data <<- rbind(final_content_data , data)
print("inserting data into database")
insertData <- data.frame(
post_number = data$post_id,
name = data$name ,
source = data$source,
description = data$content,
time = as.character(data$time)
)
if(dbExistsTable(con,"posts")){
dbAppendTable(con,"posts",insertData)
} else {
dbCreateTable(con,"posts",insertData)
dbAppendTable(con,"posts",insertData)
}
} ,
error = function(e){
print(e)
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
print(paste("Page number : " , i))
print("scrolling")
scroller(1)
r_i = r_i + 20
}
)
}
remDr$close()
#  we will neeed to remove the first row as it is an NA row.
final_content_data <- final_content_data[-1,]
final_image_data <- final_image_data[-1,]
message("Scrapping finished successfully")
}
fb_group("441377287284354",1000)
library("rvest")
url <- "https://www.citypopulation.de/en/saudiarabia/cities/"
page <- url %>%
read_html()
table <- page %>% html_nodes(xpath='//*[@id="ts"]')
cites_df = html_table(table)
df = data.frame(cites_df)
View(df)
setwd("../Desktop/Ines")
library(readr)
residence_ann_mois <- read_csv("data/residence-ann-mois.csv")
View(residence_ann_mois)
residence <- residence_ann_mois
residence = residence[,!grepl("Total",colnames(residence))]
colnames(residence) = c("periode",colnames(residence)[2:ncol(residence)])
totals = residence[c(1,14,27,40,53,66),]
residence = residence[-c(1,14,27,40,53,66),]
length(residence$periode)/12
j = 1
for(i in 2017:2021){
for(k in 1:12){
residence$periode[j] = paste0(residence$periode[j],"_",i)
j = j + 1
}
}
n= nrow(residence)*(ncol(residence)-1)
df = data.frame(year = rep(NA,n) , month = rep(NA,n) , id_res = rep(NA,n), n = rep(NA,n) )
k = 1
for(i in 1:nrow(residence)){
date = residence[i,1][[1]]
s=strsplit(date,"_")[[1]]
m=as.numeric(s[1])
y=as.numeric(s[2])
for(j in 2:(ncol(residence))){
df$year[k] = y
df$month[k] = m
df$id_res[k] = names(residence[i,j])
df$n[k] = residence[i,j]
k = k +1*print(k)
}
}
k = 1
for(i in 1:nrow(residence)){
date = residence[i,1][[1]]
s=strsplit(date,"_")[[1]]
m=as.numeric(s[1])
y=as.numeric(s[2])
for(j in 2:(ncol(residence))){
df$year[k] = y
df$month[k] = m
df$id_res[k] = names(residence[i,j])
df$n[k] = residence[i,j]
k = k +1
print(k)
}
}
View(df)
library(readr)
residenceName <- read_csv("data/residence.csv")
View(residenceName)
for (i in 1:nrow(df)){
print(residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$LIB)
break
}
for (i in 1:nrow(df)){
df$LIB[i] = residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$LIB
#df$AppGeo[i] =  residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$AppGeo
#df$AppGeo[i] =  residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$ServCent
print(i)
}
for (i in 1:nrow(df)){
df$LIB[i] = residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$LIB
df$AppGeo[i] =  residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$AppGeo
df$ServCent[i] =  residenceName[residenceName$CODE_RESIDENCE == df$id_res[i],]$ServCent
print(i)
}
write.csv(df,"./data/repartition_residence_clean.csv",col.names = T)
write.csv(as.data.frame(df),"./data/repartition_residence_clean.csv",col.names = T)
df
library(readr)
position_depart_Feuille_2 <- read_csv("data/position-depart - Feuille 2.csv")
View(position_depart_Feuille_2)
unique(position_depart_Feuille_2$`lib-depart`)
write.csv(as.data.frame(df),"./data/repartition_residence_clean.csv",col.names = T,row.names = F)
as.data.frame(df)
write.csv(as.data.frame(df),"./data/repartition_residences_clean.csv",col.names = T,row.names = F)
df <- apply(df,2,as.character)
write.csv(as.data.frame(df),"./data/repartition_residences_clean.csv",col.names = T,row.names = F)
write.csv(as.data.frame(df),"./data/repartition_residence_clean.csv",col.names = T,row.names = F)
library(shiny); runApp('dash2.r')
runApp('dash2.r')
runApp('dash2.r')
df
View(df)
df = as.data.frame(df)
frame = df[df$LIB %in% c("Pôle Inf Tunis") & df$year == "2017",]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = position
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = month,
y = n,
color = LIB
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$ServCent %in% c("Pôle Informatique") & df$year == "2017",]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = LIB
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$ServCent %in% c("Pôle Informatique") & df$year == "2017" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$ServCent %in% c("Pôle Informatique") & df$LIB %in% c("Pôle Inf Tunis")  & df$year == "2017" ,]
frame = df[(df$ServCent %in% c("Pôle Informatique") || df$LIB %in% c("Pôle Inf Tunis"))  & df$year == "2017" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$ServCent %in% c("Pôle Informatique")  & df$year == "2017" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
View(frame)
frame = df[df$LIB %in% c("Pôle Inf Sousse")  & df$year == "2017" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$LIB %in% c("Pôle Inf Sousse")  & df$year == "2018" ,]
runApp('dash2.r')
output$residence <- renderPlot({
frame <- repartition_residence[repartition_residence$LIB %in% input$selectedLIB & repartition_residence$year == input$yearResidence, ]
frame$month <- as.Date(paste0("01-", frame$month, "-1999"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = LIB
)
) +
geom_bar(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month", date_labels = "%B") +
ylab("Nombre d'agent") +
ggthemes::theme_hc(base_size = 18)
})
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_bar(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
frame = df[df$LIB %in% c("Pôle Inf Sousse")  & df$year == "2018"& df$month == "1" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_bar(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = month,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
table(frame$LIB)
frame = df[df$LIB %in% c("Pôle Inf Sousse","Pôle Inf Sousse")  & df$year == "2018"& df$month == "1" ,]
table(frame$LIB)
frame = df[df$LIB %in% c("Pôle Inf Sousse","Pôle Inf Tunis")  & df$year == "2018"& df$month == "1" ,]
frame$year = as.numeric((frame$year))
frame$n = as.numeric((frame$n))
frame$month <- as.Date(paste0("01-", frame$month, "-2014"), "%d-%m-%Y")
table(frame$LIB)
barplot(table(frame$LIB))
ggplot(
frame,
aes(
x = LIB,
y = n,
color = ServCent
)
) +
geom_line(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
color = ServCent
)
) +
geom_bar(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
color = ServCent
)
) +
geom_bar(size = 1.8) +
scale_x_date(date_minor_breaks = "1 month",date_labels = "%B")+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
color = ServCent
)
) +
geom_bar(size = 1.8) +
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n
)
) +
geom_bar(size = 1.8,stat="identity", fill=ServCent) +
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n
)
) +
geom_bar(size = 1.8,stat="identity", fill=frame$ServCent) +
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
fill=frame$ServCent
)
) +
geom_bar(size = 1.8,stat="identity") +
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
fill=ServCent
)
) +
geom_bar(size = 1.8,stat="identity") +
scale_x_discrete()+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
fill=ServCent
)
) +
geom_bar(size = 1.8,stat="identity") +
scale_y_discrete()+
ggthemes::theme_hc(base_size = 18)
ggplot(
frame,
aes(
x = LIB,
y = n,
fill=ServCent
)
) +
geom_bar(size = 1.8,stat="identity") +
scale_y_discrete(1:100)+
ggthemes::theme_hc(base_size = 18)
runApp('dash2.r')
View(final_content_data)
View(final_content_data)
library(readr)
residence_global <- read_csv("data/residence-global.csv")
View(residence_global)
