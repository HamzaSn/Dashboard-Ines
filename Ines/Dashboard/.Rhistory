pass$sendKeysToElement(list(password,key = "enter"))
Sys.sleep(2)
Sys.sleep(5)
loggedIn = remDr$executeScript("return document.getElementById('login_error')")
print(length(loggedIn))
}
skip = remDr$findElement(using = "css" , value = '[class = "_54k8 _56bs _26vk _56b_ _56bw _56bt"]' )
skip$sendKeysToElement(list(key='enter'))
scroller <- function(times){
for(i in 1:times){
scrollJs <- "window.scroll(0,document.body.scrollHeight)"
remDr$executeScript(scrollJs)
Sys.sleep(20)
}
}
final_content_data = NA
final_image_data = NA
print(paste("Accessing Facebook Group" , group) )
remDr$navigate(paste0("https://m.facebook.com/groups/" , group , "/") )
r_i = 0
for(i in 1:scrolltimes){
Sys.sleep(5)
js <- paste0("
// A JS Script to Query the name , content , time and the url of the image posted.
const container = [...document.getElementsByClassName('_55wo _5rgr _5gh8 async_like')].slice(",r_i,",",r_i+20,");
let obs = {};
url = {};
let time = {};
let i = 1;
container.forEach((post) => {
currentName = [];
[...post.getElementsByTagName('strong')].forEach((elem) =>
currentName.push(elem.textContent))
obs[currentName + ' post ' + i ] = [];
currentContent = [] ;
[...post.getElementsByClassName('_5rgt _5nk5 _5wnf _5msi')].forEach((el) => [...el.getElementsByTagName('p')].forEach((r) =>
currentContent.push(r.textContent) ))
obs[currentName + ' post ' + i ] = currentContent;
time['post' + i ] = [];
currentTime = [];
[...post.getElementsByClassName('_52jc _5qc4 _78cz _24u0 _36xo')].forEach((el) =>
[...el.getElementsByTagName('abbr')].forEach((r) => currentTime.push(r.textContent)));
time['post' + i ] = currentTime;
currentUrl = [];
[...post.getElementsByClassName('story_body_container')].forEach((e) =>
[...e.getElementsByTagName('i')].forEach((r) => currentUrl.push(r.style.backgroundImage)
)) ;
url['post '+ i] = currentUrl;
i++;
})
return[obs,time,url];
")
# Executing the script
tryCatch(
expr = {
print("sending JavaScript Query")
results = remDr$executeScript(js)
# Processing Data
# names and content data cleaning and processing
print("proccessing content data")
names = attr(results[[1]],"names")
content = character()
name = character()
for(j in 1:length(names)){
if(length(results[[1]][[j]])== 0){next} else {
txt = unlist(results[[1]][[j]])
content[j] = paste(txt,collapse = " ")
name[j] = names[j]
}
}
preData = data.frame(name, content)
preData = preData[complete.cases(preData),]
split = strsplit(preData$name , "post")
post_id <- numeric()
owner = character()
for(x in 1:nrow(preData)){
post_id[x] = as.numeric(split[[x]][2])
owner[x] = split[[x]][1]
}
content_data = data.frame(post_id= post_id , name = owner , content = preData$content )
content_data <- content_data[,c(2,3,1)]
content_data = arrange(content_data,post_id)
posters = character()
source = character()
splitNames = strsplit(content_data$name,",")
for(y in 1:length(splitNames)){
posters[y] = splitNames[[y]][1]
source[y] = paste(splitNames[[y]][2],splitNames[[y]][3],sep = "/")
}
content_data$name <- posters
content_data$source <- source
# time data cleaning and processing
print("processing time data")
times = attr(results[[2]],"names")
post_id = numeric()
time = character()
split = strsplit(times,"post")
for(a in 1:length(times)){
time[a] = results[[2]][[a]][[1]]
post_id[a] = as.numeric(split[[a]][2])
}
time_data = data.frame(post_id,time)
time_data = arrange(time_data,post_id)
# Removing missing content data
x = content_data$post_id[!is.na(content_data$content)]
content_data <- content_data[complete.cases(content_data),]
time_data <- time_data[x,]
# Removing unwanted characters
content_data$content = gsub("\\.(?=[^.]*\\.)", "", content_data$content, perl=TRUE)
content_data$content = gsub("\\." , "" , content_data$content)
# Joining the time and the content data tables by the post_id.
data = merge(content_data,time_data,by.x= "post_id" , by.y ="post_id",all = T)
print("extracting informations from content and preparing to export")
# as the time of the post can be in the formats : 1h , 35 mins , Yesterday ...
# we need to convert it to a date and time format.
for(b in 1:nrow(data)){
if(grepl("min",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60)
}
if(grepl("hr",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60*60)
}
if(grepl("Now",data$time[b])){
data$time[b] <- Sys.time()
}
if(grepl("Yesterday",data$time[b])){
data$time[b] <-  gsub("Yesterday",as.character(Sys.Date()-1),data$time[b] )
data$time[b] <- gsub("at","",data$time[b])
}
}
# Format the dates
newTime <- rep(ymd(Sys.Date()), nrow(data))
for( s in 1:nrow(data)){
if(grepl("at",data$time[s])){
if(grepl("202",data$time[s])){
dayMonth =  strsplit(data$time[s],",")[[1]][1]
year = strsplit(data$time[s],",")[[1]][2]
year = gsub(" ","",year)
year = substr(year,1,4)
newTime[s] <- mdy(gsub(" ", "-" ,paste(dayMonth,year) ))
} else {
newTime[s] <- mdy(gsub(" ","-",paste0(strsplit(data$time[s],"at")[[1]][1],"2021")))
}
} else {
newTime[s] <- ymd(substr(data$time[s],1,10))
}
}
data$time <- newTime
# creating a column with the current group id
data$group_id <- rep(group , nrow(data))
# row binding the result of the current group with previous data
final_content_data <<- rbind(final_content_data , data)
print("inserting data into database")
insertData <- data.frame(
post_number = data$post_id,
name = data$name ,
source = data$source,
description = data$content,
time = as.character(data$time)
)
if(dbExistsTable(con,"posts")){
dbAppendTable(con,"posts",insertData)
} else {
dbCreateTable(con,"posts",insertData)
dbAppendTable(con,"posts",insertData)
}
} ,
error = function(e){
print(e)
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
print(paste("Page number : " , i))
print("scrolling")
scroller(1)
r_i = r_i + 20
}
)
}
remDr$close()
#  we will neeed to remove the first row as it is an NA row.
final_content_data <- final_content_data[-1,]
final_image_data <- final_image_data[-1,]
message("Scrapping finished successfully")
}
library(RSelenium)
library(rvest)
library(tidyverse)
library(odbc)
library(RSQLite)
library(qdapRegex)
library(lubridate)
fb_group("971638303021419",1000)
View(fb_group)
View(final_content_data)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print("Ahla Hamza")
atba3("Ahla Hamza")
"abc
5
"
"abc
5
;
;
""
"
x = "abc"
y = 5
wael = "abc"
name = "wael"
age = 23
spirnt("hello world")
pirnt("hello world")
print("hello world")
print "Hello world"
print "Hello world"
print("hello world")
print "Hello world"
print("Hello world"
print()"Hello world"
age = "23"
typeof("23")
typeof(23)
typeof(23L)
typeof(23.0)
print("23")
typeof(age)
age = 23
typeof(age)
age = 23haha
age = "23haha"
typeof(age)
emptyBox = NULL
emptyBox
emptyBox
age
name
"wael"
name
age = 22 + 1
age
age = "22 + 1"
age
age = 22 + 1
age
salut("hamza")
# print() typeof()
salut <- function(name){
paste("salut", name)
}
salut("hamza")
salut("wael")
# print() typeof()
salut <- fonction(name){
paste("salut", name)
}
salut(54)
library(RSelenium)
library(rvest)
library(tidyverse)
library(odbc)
library(RSQLite)
library(qdapRegex)
library(lubridate)
fb_group <- function(group, scrolltimes){
# Create Headless WebBrowser with RSelenium
port <- sample(1000:9999,1)
print("loading WebDriver")
rD <- rsDriver(port=port,browser = "chrome",check=F,chromever = "103.0.5060.53")
Sys.sleep(3)
print("Connecting To Facebook")
remDr <- rD$client
remDr$navigate("https://m.facebook.com")
print("connecting to database")
con <- dbConnect(SQLite(),dbname = "facebook.db")
# Read facebook credentials
loggedIn = 'none'
while (length(loggedIn) != 0){
email = remDr$findElement( using  = "id" , value = "m_login_email")
pass = remDr$findElement(using = "id","m_login_password")
email$clearElement()
pass$clearElement()
adress <- "rproga98@gmail.com"
password <- "XFR4MC2022"
Sys.sleep(2)
print("Loging in")
email$sendKeysToElement(list(adress))
pass$sendKeysToElement(list(password,key = "enter"))
Sys.sleep(2)
Sys.sleep(5)
loggedIn = remDr$executeScript("return document.getElementById('login_error')")
print(length(loggedIn))
}
skip = remDr$findElement(using = "css" , value = '[class = "_54k8 _56bs _26vk _56b_ _56bw _56bt"]' )
skip$sendKeysToElement(list(key='enter'))
scroller <- function(times){
for(i in 1:times){
scrollJs <- "window.scroll(0,document.body.scrollHeight)"
remDr$executeScript(scrollJs)
Sys.sleep(20)
}
}
final_content_data = NA
final_image_data = NA
print(paste("Accessing Facebook Group" , group) )
remDr$navigate(paste0("https://m.facebook.com/groups/" , group , "/") )
r_i = 0
for(i in 1:scrolltimes){
Sys.sleep(5)
js <- paste0("
// A JS Script to Query the name , content , time and the url of the image posted.
const container = [...document.getElementsByClassName('_55wo _5rgr _5gh8 async_like')].slice(",r_i,",",r_i+20,");
let obs = {};
url = {};
let time = {};
let i = 1;
container.forEach((post) => {
currentName = [];
[...post.getElementsByTagName('strong')].forEach((elem) =>
currentName.push(elem.textContent))
obs[currentName + ' post ' + i ] = [];
currentContent = [] ;
[...post.getElementsByClassName('_5rgt _5nk5 _5wnf _5msi')].forEach((el) => [...el.getElementsByTagName('p')].forEach((r) =>
currentContent.push(r.textContent) ))
obs[currentName + ' post ' + i ] = currentContent;
time['post' + i ] = [];
currentTime = [];
[...post.getElementsByClassName('_52jc _5qc4 _78cz _24u0 _36xo')].forEach((el) =>
[...el.getElementsByTagName('abbr')].forEach((r) => currentTime.push(r.textContent)));
time['post' + i ] = currentTime;
currentUrl = [];
[...post.getElementsByClassName('story_body_container')].forEach((e) =>
[...e.getElementsByTagName('i')].forEach((r) => currentUrl.push(r.style.backgroundImage)
)) ;
url['post '+ i] = currentUrl;
i++;
})
return[obs,time,url];
")
# Executing the script
tryCatch(
expr = {
print("sending JavaScript Query")
results = remDr$executeScript(js)
# Processing Data
# names and content data cleaning and processing
print("proccessing content data")
names = attr(results[[1]],"names")
content = character()
name = character()
for(j in 1:length(names)){
if(length(results[[1]][[j]])== 0){next} else {
txt = unlist(results[[1]][[j]])
content[j] = paste(txt,collapse = " ")
name[j] = names[j]
}
}
preData = data.frame(name, content)
preData = preData[complete.cases(preData),]
split = strsplit(preData$name , "post")
post_id <- numeric()
owner = character()
for(x in 1:nrow(preData)){
post_id[x] = as.numeric(split[[x]][2])
owner[x] = split[[x]][1]
}
content_data = data.frame(post_id= post_id , name = owner , content = preData$content )
content_data <- content_data[,c(2,3,1)]
content_data = arrange(content_data,post_id)
posters = character()
source = character()
splitNames = strsplit(content_data$name,",")
for(y in 1:length(splitNames)){
posters[y] = splitNames[[y]][1]
source[y] = paste(splitNames[[y]][2],splitNames[[y]][3],sep = "/")
}
content_data$name <- posters
content_data$source <- source
# time data cleaning and processing
print("processing time data")
times = attr(results[[2]],"names")
post_id = numeric()
time = character()
split = strsplit(times,"post")
for(a in 1:length(times)){
time[a] = results[[2]][[a]][[1]]
post_id[a] = as.numeric(split[[a]][2])
}
time_data = data.frame(post_id,time)
time_data = arrange(time_data,post_id)
# Removing missing content data
x = content_data$post_id[!is.na(content_data$content)]
content_data <- content_data[complete.cases(content_data),]
time_data <- time_data[x,]
# Removing unwanted characters
content_data$content = gsub("\\.(?=[^.]*\\.)", "", content_data$content, perl=TRUE)
content_data$content = gsub("\\." , "" , content_data$content)
# Joining the time and the content data tables by the post_id.
data = merge(content_data,time_data,by.x= "post_id" , by.y ="post_id",all = T)
print("extracting informations from content and preparing to export")
# as the time of the post can be in the formats : 1h , 35 mins , Yesterday ...
# we need to convert it to a date and time format.
for(b in 1:nrow(data)){
if(grepl("min",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60)
}
if(grepl("hr",data$time[b])){
t = as.numeric(strsplit(data$time[b]," ")[[1]][1])
data$time[b] <- as.character(Sys.time() - t*60*60)
}
if(grepl("Now",data$time[b])){
data$time[b] <- Sys.time()
}
if(grepl("Yesterday",data$time[b])){
data$time[b] <-  gsub("Yesterday",as.character(Sys.Date()-1),data$time[b] )
data$time[b] <- gsub("at","",data$time[b])
}
}
# Format the dates
newTime <- rep(ymd(Sys.Date()), nrow(data))
for( s in 1:nrow(data)){
if(grepl("at",data$time[s])){
if(grepl("202",data$time[s])){
dayMonth =  strsplit(data$time[s],",")[[1]][1]
year = strsplit(data$time[s],",")[[1]][2]
year = gsub(" ","",year)
year = substr(year,1,4)
newTime[s] <- mdy(gsub(" ", "-" ,paste(dayMonth,year) ))
} else {
newTime[s] <- mdy(gsub(" ","-",paste0(strsplit(data$time[s],"at")[[1]][1],"2021")))
}
} else {
newTime[s] <- ymd(substr(data$time[s],1,10))
}
}
data$time <- newTime
# creating a column with the current group id
data$group_id <- rep(group , nrow(data))
# row binding the result of the current group with previous data
final_content_data <<- rbind(final_content_data , data)
print("inserting data into database")
insertData <- data.frame(
post_number = data$post_id,
name = data$name ,
source = data$source,
description = data$content,
time = as.character(data$time)
)
if(dbExistsTable(con,"posts")){
dbAppendTable(con,"posts",insertData)
} else {
dbCreateTable(con,"posts",insertData)
dbAppendTable(con,"posts",insertData)
}
} ,
error = function(e){
print(e)
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
print(paste("Page number : " , i))
print("scrolling")
scroller(1)
r_i = r_i + 20
}
)
}
remDr$close()
#  we will neeed to remove the first row as it is an NA row.
final_content_data <- final_content_data[-1,]
final_image_data <- final_image_data[-1,]
message("Scrapping finished successfully")
}
fb_group("441377287284354",1000)
library("rvest")
url <- "https://www.citypopulation.de/en/saudiarabia/cities/"
page <- url %>%
read_html()
table <- page %>% html_nodes(xpath='//*[@id="ts"]')
cites_df = html_table(table)
df = data.frame(cites_df)
View(df)
install.packages('rsconnect')
setwd("../Desktop/Ines/")
rsconnect::setAccountInfo(name='mqp5ub-snoussi-hamza',
token='B3654E5BEE996C6CF92ABEC71377B4D2',
secret='bYTT/pkms2NGoAFR++zlVW87ih4NskmnBC2FDRoB')
rsconnect::deployApp('dash2.r')
library(rsconnect)
deployApp()
setWd("./Dashboard/")
setwd("./Dashboard/")
deployApp()
deployApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
